{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Hi,\
\
I enjoyed working on this test. Here is a general approach I used to divide my time:\
Day 1: Plan \
Day 2: Build UI \
Day 3: Build data base with UI\
Day 4: Add backend support\
Day 5: Polish \
\
\
\
Running the application: \
- When you start the project in Unity, you\'92d need to add add a username to make or view reservations. \
- If you use the username \'93Jacinda\'94 or \'93Greta\'94, you can view existing reservations. \
- Existing reservations are saved in screenReservations.json. If you select date April 4 or 5 and select 7:30pm slot for Harvey movie, you can see some reserved slots in the seat map. \
- There is some prepopulated data. Otherwise, while the application is playing, the data will be saved in dictionaries in NetworkDataBridge.cs\
\
\
\
Notes about decisions: \
1. I made the UI with desktop and web resolutions in mind. I know that it doesn\'92t fit all the mobile screen sizes, but I ran out of time to address those. \
\
2. I wanted to find a way that the screen seat maps could be dynamically generated. So I made the seatMaps.json file. Though it required for me to write a more extensive Json parser to read a 2D array, so I ended up making prefabs of screen maps instead. I made a script Scripts > Tools > SeatGridGenerator.cs to help me with it. \
\
3. I did not finish persisting the data that is generated at runtime, but exposed a method in NetworkDataBridge.cs where it can be added. \
\
}